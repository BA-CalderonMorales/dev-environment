name: 'Create GitHub Release'
description: 'Creates a GitHub release with optional signing'

inputs:
  version:
    description: 'Version to release (tag name)'
    required: true
  prerelease:
    description: 'Whether this is a prerelease'
    required: false
    default: 'false'
  release_sha:
    description: 'SHA to create the release from'
    required: true
  github_token:
    description: 'GitHub token for authentication'
    required: true
  bot_gpg_private_key:
    description: 'GPG private key for signing'
    required: false
  bot_gpg_passphrase:
    description: 'Passphrase for GPG private key'
    required: false
  bot_email:
    description: 'Email for git config'
    required: true
  bot_name:
    description: 'Name for git config'
    required: true
  draft:
    description: 'Whether to create as a draft release'
    required: false
    default: 'false'
  skip_if_exists:
    description: 'Skip if tag/release already exists'
    required: false
    default: 'false'
  allow_unsigned:
    description: 'Allow unsigned tags if GPG signing fails'
    required: false
    default: 'true'
  generate_release_notes:
    description: 'Auto-generate release notes from PRs'
    required: false
    default: 'true'

outputs:
  release_url:
    description: 'URL of the created release'
    value: ${{ steps.create_release.outputs.release_url }}

runs:
  using: 'composite'
  steps:
    # Validate version input before proceeding
    - name: Validate Version
      shell: bash
      run: |
        if [[ -z "${{ inputs.version }}" ]]; then
          echo "::error::Version input is empty. Please provide a valid version."
          exit 1
        fi
        echo "Using version: ${{ inputs.version }}"

    # Check if release exists first
    - name: Check if release exists
      id: check_release
      shell: bash
      run: |
        echo "Checking for existing tag ${{ inputs.version }}..."
        if git rev-parse -q --verify "refs/tags/${{ inputs.version }}" >/dev/null; then
          echo "Tag already exists"
          if [[ "${{ inputs.skip_if_exists }}" == "true" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ inputs.version }} already exists, and skip_if_exists is false"
            exit 1
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    # Setup Git signing using existing step_setup_gpg.rs script
    - name: Setup GPG and Git
      if: steps.check_release.outputs.exists != 'true'
      id: setup_git
      uses: ./.github/actions/setup-git-signing
      with:
        bot_email: ${{ inputs.bot_email }}
        bot_name: ${{ inputs.bot_name }}
        bot_gpg_private_key: ${{ inputs.bot_gpg_private_key }}
        bot_gpg_passphrase: ${{ inputs.bot_gpg_passphrase }}
        debug_mode: 'true'

    # Compile Rust scripts if needed
    - name: Ensure Rust scripts are compiled
      if: steps.check_release.outputs.exists != 'true'
      shell: bash
      run: |
        if [ ! -f "${{ github.workspace }}/.github/scripts/target/debug/step_create_release" ]; then
          cd ${{ github.workspace }}/.github/scripts
          cargo build
        fi

    # Run the release creation script
    - name: Create GitHub Release
      if: steps.check_release.outputs.exists != 'true'
      id: create_release
      shell: bash
      run: ${{ github.workspace }}/.github/scripts/target/debug/step_create_release
      env:
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_PRERELEASE: ${{ inputs.prerelease }}
        INPUT_RELEASE_SHA: ${{ inputs.release_sha }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_DRAFT: ${{ inputs.draft }}
        INPUT_GENERATE_RELEASE_NOTES: ${{ inputs.generate_release_notes }}
        INPUT_ALLOW_UNSIGNED: ${{ inputs.allow_unsigned }}