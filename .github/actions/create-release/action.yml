name: 'Create Release'
description: 'Creates a GitHub release with version tagging and updates queues'

inputs:
  github_token:
    description: 'GitHub token'
    required: true
  version:
    description: 'Version to release'
    required: true
  prerelease:
    description: 'Whether this is a prerelease'
    required: true
  release_sha:
    description: 'SHA to reference in release'
    required: true
  bot_gpg_private_key:
    description: 'GPG private key for signing commits'
    required: false
  bot_gpg_passphrase:
    description: 'GPG passphrase'
    required: false
  bot_email:
    description: 'Bot email for git config'
    required: false
    default: 'actions@github.com'
  bot_name:
    description: 'Bot name for git config'
    required: false
    default: 'GitHub Actions'
  bot_domain:
    description: 'Bot domain for git config'
    required: false
    default: 'github.com'

runs:
  using: 'composite'
  steps:
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Setup GPG Key
      id: setup_gpg
      if: inputs.bot_gpg_private_key != ''
      shell: bash
      working-directory: .github/scripts
      run: |
        cargo run --bin step_setup_gpg
        echo "gpg_setup_status=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
      env:
        INPUT_BOT_GPG_PRIVATE_KEY: ${{ inputs.bot_gpg_private_key }}
        INPUT_BOT_GPG_PASSPHRASE: ${{ inputs.bot_gpg_passphrase }}
        INPUT_BOT_EMAIL: ${{ inputs.bot_email }}
        RUST_LOG: info

    - name: Create Git Tag
      shell: bash
      run: |
        # Set up basic git config if not already done by GPG setup
        if [ "${{ steps.setup_gpg.outputs.gpg_setup_status || '1' }}" != "0" ]; then
          git config --global user.email "${{ inputs.bot_email }}"
          git config --global user.name "${{ inputs.bot_name || 'GitHub Actions' }}"
        fi
        
        # Create unsigned tag if GPG setup failed
        if [ "${{ steps.setup_gpg.outputs.gpg_setup_status || '1' }}" != "0" ]; then
          echo "Creating unsigned tag (GPG setup failed)"
          git tag -a ${{ inputs.version }} -m "Release ${{ inputs.version }}"
        else
          echo "Creating signed tag"
          git tag -s ${{ inputs.version }} -m "Release ${{ inputs.version }}"
        fi
        
        # Push the tag
        git push origin ${{ inputs.version }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            ...context.repo,
            tag_name: '${{ inputs.version }}',
            name: 'Release ${{ inputs.version }}',
            body: 'Release ${{ inputs.version }} created from commit ${{ inputs.release_sha }}.',
            draft: false,
            prerelease: ${{ inputs.prerelease == 'true' }}
          });
          console.log(`Release created: ${release.html_url}`);
          return release.id;

    - name: Update Release Queue
      shell: bash
      working-directory: .github/scripts
      run: cargo run --bin step_update_queue
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_ACTION: clear
        INPUT_BRANCH: ${{ github.ref_name }}
        INPUT_PROCESSED_SHA: ${{ inputs.release_sha }}
        RUST_LOG: info

    - name: Close Associated Release PRs
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // Search for PRs containing the release SHA
          const query = `is:pr is:open label:release-queue ${{ inputs.release_sha }}`;
          const searchResult = await github.rest.search.issuesAndPullRequests({q: query});
          
          for (const item of searchResult.data.items) {
            console.log(`Closing PR #${item.number} associated with release ${{ inputs.version }}`);
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: item.number,
              body: `âœ… This PR has been included in release ${{ inputs.version }}. Closing automatically.`
            });
            
            await github.rest.pulls.update({
              ...context.repo,
              pull_number: item.number,
              state: 'closed'
            });
          }