name: 'Create GitHub Release'
description: 'Creates a GitHub release with optional signing and branch-specific version determination'

inputs:
  new_version:
    description: 'New version to release (if not using auto)'
    required: true
    default: 'develop-v0.0.1'
  is_beta:
    description: 'Whether the release is a beta version'
    required: true
    default: 'false'
  prerelease:
    description: 'Whether this is a prerelease'
    required: false
    default: 'false'
  release_sha:
    description: 'SHA to create the release from'
    required: true
  github_token:
    description: 'GitHub token for authentication'
    required: true
  bot_gpg_private_key:
    description: 'GPG private key for signing'
    required: false
  bot_gpg_passphrase:
    description: 'Passphrase for GPG private key'
    required: false
  bot_email:
    description: 'Email for git config'
    required: true
  bot_name:
    description: 'Name for git config'
    required: true
  allow_unsigned:
    description: 'Allow unsigned tags if GPG signing fails'
    required: false
    default: 'true'
  generate_release_notes:
    description: 'Auto-generate release notes from PRs'
    required: false
    default: 'true'

outputs:
  release_url:
    description: 'URL of the created release'
    value: ${{ steps.create_release.outputs.release_url }}
  version:
    description: 'The final version used for the release'
    value: ${{ inputs.new_version }}

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine Release Version
      shell: bash
      id: determine_version
      run: |
        # Use the version from the parameter
        VERSION="${{ inputs.new_version }}"
        echo "Received version: $VERSION"
        
        # Make sure we're not using the default
        if [[ "$VERSION" == "develop-v0.0.1" ]]; then
          echo "::error::Invalid version provided: $VERSION"
          exit 1
        fi
        
        # Set the version for later steps
        echo "use_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    # Compile Rust scripts if needed
    - name: Ensure Rust scripts are compiled
      if: steps.check_release.outputs.release_exists != 'true'
      shell: bash
      run: |
        if [ ! -f "${{ github.workspace }}/.github/scripts/target/debug/step_create_release" ]; then
          cd ${{ github.workspace }}/.github/scripts
          cargo build
        fi

    # Setup Git signing using existing step_setup_gpg.rs script
    - name: Setup GPG and Git
      if: steps.check_release.outputs.release_exists != 'true'
      id: setup_git
      uses: ./.github/actions/setup-git-signing
      with:
        bot_email: ${{ inputs.bot_email }}
        bot_name: ${{ inputs.bot_name }}
        bot_gpg_private_key: ${{ inputs.bot_gpg_private_key }}
        bot_gpg_passphrase: ${{ inputs.bot_gpg_passphrase }}
        debug_mode: 'true'

    # Run the release creation script
    - name: Create GitHub Release
      id: create_release
      shell: bash
      run: |
        VERSION="${{ steps.determine_version.outputs.use_version }}"
        
        # Install GitHub CLI if needed
        if ! command -v gh &> /dev/null; then
          echo "Installing GitHub CLI..."
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
        fi
        
        # Check if a release already exists
        if gh release view "$VERSION" &>/dev/null; then
          echo "Release for version $VERSION already exists."
          release_url="https://github.com/$GITHUB_REPOSITORY/releases/tag/$VERSION"
          echo "release_url=$release_url" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Creating release for version $VERSION..."
          # Set the version in the environment for the Rust script
          export INPUT_VERSION="$VERSION"
          ${{ github.workspace }}/.github/scripts/target/debug/step_create_release
        fi
      env:
        INPUT_VERSION: ${{ steps.determine_version.outputs.use_version }}
        INPUT_RELEASE_SHA: ${{ inputs.release_sha }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRERELEASE: ${{ inputs.prerelease }}
        INPUT_GENERATE_RELEASE_NOTES: ${{ inputs.generate_release_notes }}
        INPUT_ALLOW_UNSIGNED: ${{ inputs.allow_unsigned }}
        GITHUB_TOKEN: ${{ inputs.github_token }}

    # Set final output
    - name: Set Version Output
      shell: bash
      run: |
        echo "Final release version: ${{ steps.determine_version.outputs.use_version }}"
        echo "version=${{ steps.determine_version.outputs.new_version}}" >> $GITHUB_OUTPUT