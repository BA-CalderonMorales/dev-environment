name: 'Version Determiner'
description: 'Determines the next version number with beta support'

outputs:
  new_version:
    description: 'The next version number'
    value: ${{ steps.set_version.outputs.version }}
  is_beta:
    description: 'Whether this is a beta version'
    value: ${{ steps.set_version.outputs.is_beta }}

runs:
  using: 'composite'
  steps:
    - name: Get Latest Tag
      id: get_latest_tag
      shell: bash
      run: |
        # Get the latest tag, defaulting to v0.1.0-beta.1 if none exists
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0-beta.1")
        echo "Latest tag: $latest_tag"
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

    - name: Set Next Version
      id: set_version
      shell: bash
      run: |
        latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        
        # Function to increment version component
        increment_version() {
          local version=$1
          local position=$2  # major=1, minor=2, patch=3
          
          IFS='.' read -ra parts <<< "$version"
          parts[$((position-1))]=$((parts[$((position-1))]+1))
          
          # Reset subsequent numbers to 0
          for ((i=position; i<${#parts[@]}; i++)); do
            parts[$i]=0
          done
          
          echo "${parts[*]}" | tr ' ' '.'
        }

        if [[ "$current_branch" == "beta" || "${{ github.event.inputs.source_branch }}" == "beta" ]]; then
          # Beta release path
          if [[ $latest_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            beta="${BASH_REMATCH[4]}"
            
            # Increment beta number only
            new_beta=$((beta + 1))
            new_version="v$major.$minor.$patch-beta.$new_beta"
            is_beta="true"
          elif [[ $latest_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # If coming from a stable version, start new beta series
            # Increment minor version for new feature cycle
            version=$(increment_version "${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}" 2)
            new_version="v${version}-beta.1"
            is_beta="true"
          else
            # Default to initial beta
            new_version="v0.1.0-beta.1"
            is_beta="true"
          fi
        elif [[ "$current_branch" == "main" || "${{ github.event.inputs.source_branch }}" == "main" ]]; then
          # Stable release path
          if [[ $latest_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+)-beta\.[0-9]+ ]]; then
            # Convert beta to stable (remove beta suffix)
            new_version="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
            is_beta="false"
          elif [[ $latest_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # Increment patch for stable-to-stable
            version=$(increment_version "${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}" 3)
            new_version="v${version}"
            is_beta="false"
          else
            # Default stable
            new_version="v0.1.0"
            is_beta="false"
          fi
        fi
        
        echo "New version: $new_version"
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "is_beta=$is_beta" >> $GITHUB_OUTPUT
