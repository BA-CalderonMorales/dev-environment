name: 'Process Release Queue'
description: 'Processes release queue items and determines if a release should be created'

inputs:
  github_token:
    required: true
  trigger_sha:
    required: false
    default: ''
  source_branch:
    required: true
  force_process:
    required: false
    default: 'false'
  is_scheduled:
    required: false
    default: 'false'
  initial_version:
    required: true

outputs:
  sha:
    description: 'SHA to release'
    value: ${{ steps.queue_check.outputs.sha }}
  branch:
    description: 'Branch to release from'
    value: ${{ inputs.source_branch }}
  can_proceed:
    description: 'Whether to proceed with release'
    value: ${{ steps.queue_check.outputs.can_proceed }}
  version:
    description: 'Version to release'
    value: ${{ steps.get_version.outputs.version }}
  prerelease:
    description: 'Whether this is a prerelease'
    value: ${{ steps.get_version.outputs.is_beta }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: queue_check
      shell: bash
      run: |
        # Get queue file path from branch
        if [[ "${{ inputs.source_branch }}" == "beta" ]]; then
          QUEUE_FILE=".github/release_queue/beta.json"
          MIN_QUEUE_SIZE=3  # For testing, reduce to 3 items
          MIN_AGE_DAYS=0     # No waiting period for beta
        elif [[ "${{ inputs.source_branch }}" == "main" ]]; then
          QUEUE_FILE=".github/release_queue/main.json"
          MIN_QUEUE_SIZE=5  # For testing, reduce to 5 items
          MIN_AGE_DAYS=7    # One week stability period
        else
          echo "Invalid branch: ${{ inputs.source_branch }}"
          exit 1
        fi

        # Create queue directory/file if they don't exist
        mkdir -p .github/release_queue
        if [ ! -f "$QUEUE_FILE" ]; then
          echo '{"items":[]}' > "$QUEUE_FILE"
        fi

        # Process trigger SHA if provided directly
        if [ ! -z "${{ inputs.trigger_sha }}" ]; then
          echo "Direct SHA provided: ${{ inputs.trigger_sha }}"
          echo "sha=${{ inputs.trigger_sha }}" >> $GITHUB_OUTPUT
          echo "can_proceed=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Find release queue PRs using GitHub CLI
        echo "Scanning for release queue PRs..."
        
        prs=$(gh pr list \
          --base "${{ inputs.source_branch }}" \
          --label "release-queue" \
          --json number,title,headRefName \
          --state open)
        
        pr_count=$(echo "$prs" | jq length)
        echo "Found $pr_count open release queue PRs"

        # Process PRs and update queue file
        if [ "$pr_count" -gt 0 ]; then
          # Get existing queue data
          queue_data=$(cat "$QUEUE_FILE")
          
          # For each PR, extract SHA from title and add to queue
          echo "$prs" | jq -c '.[]' | while read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_branch=$(echo "$pr" | jq -r '.headRefName')
            
            # Extract SHA from PR title (format: "ðŸ“¦ Queue Update: Release [SHA] (Position: X)")
            if [[ $pr_title =~ Release\ ([0-9a-f]+)\ \(Position ]]; then
              pr_sha="${BASH_REMATCH[1]}"
              
              # Check if SHA already in queue
              is_duplicate=$(echo "$queue_data" | jq ".items[] | select(.commit==\"$pr_sha\") | any")
              
              if [ "$is_duplicate" != "true" ]; then
                echo "Adding SHA $pr_sha from PR #$pr_number to queue"
                
                # Add to queue
                timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                queue_data=$(echo "$queue_data" | jq ".items += [{\"commit\": \"$pr_sha\", \"date\": \"$timestamp\", \"pr\": $pr_number}]")
                
                # Optional: Comment on PR
                gh pr comment $pr_number -b "âœ… Added to release queue. Position: $(echo "$queue_data" | jq '.items | length')"
              else
                echo "SHA $pr_sha already in queue, skipping"
              fi
            else
              echo "Could not extract SHA from PR #$pr_number title"
            fi
          done
          
          # Write updated queue back to file
          echo "$queue_data" > "$QUEUE_FILE"
        fi

        # Check queue conditions
        QUEUE_SIZE=$(jq '.items | length' "$QUEUE_FILE")
        OLDEST_ITEM_DATE=$(jq -r '.items[0].date // empty' "$QUEUE_FILE")
        
        if [ ! -z "$OLDEST_ITEM_DATE" ]; then
          DAYS_OLD=$(( ( $(date +%s) - $(date -d "$OLDEST_ITEM_DATE" +%s) ) / 86400 ))
        else
          DAYS_OLD=0
        fi

        # Determine if release should proceed
        if [ "${{ inputs.force_process }}" == "true" ]; then
          CAN_PROCEED="true"
          echo "Force processing requested"
        elif [ "${{ inputs.is_scheduled }}" == "true" ] && [ $QUEUE_SIZE -gt 0 ]; then
          CAN_PROCEED="true"
          echo "Scheduled run with items in queue: $QUEUE_SIZE items"
        elif [ $QUEUE_SIZE -ge $MIN_QUEUE_SIZE ] && [ $DAYS_OLD -ge $MIN_AGE_DAYS ]; then
          CAN_PROCEED="true"
          echo "Queue requirements met: size=$QUEUE_SIZE items, age=$DAYS_OLD days"
        else
          CAN_PROCEED="false"
          echo "Queue requirements not met: $QUEUE_SIZE/$MIN_QUEUE_SIZE items, $DAYS_OLD/$MIN_AGE_DAYS days"
        fi
        
        # Set outputs
        echo "can_proceed=$CAN_PROCEED" >> $GITHUB_OUTPUT
        
        if [ "$CAN_PROCEED" == "true" ]; then
          # Get first SHA from queue
          FIRST_SHA=$(jq -r '.items[0].commit' "$QUEUE_FILE")
          echo "sha=$FIRST_SHA" >> $GITHUB_OUTPUT
          
          # We don't clear the queue here - that happens after successful release
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - id: get_version
      if: steps.queue_check.outputs.can_proceed == 'true'
      uses: ./.github/actions/version-determiner
      with:
        github_token: ${{ inputs.github_token }}
        ref: ${{ inputs.source_branch }}
        initial_version: ${{ inputs.initial_version }}

    - name: Debug Version Output
      if: steps.get_version.outputs.version
      shell: bash
      run: |
        echo "Version determined: ${{ steps.get_version.outputs.version }}"
        echo "Is prerelease: ${{ steps.get_version.outputs.is_beta }}"
