name: Create Release

on:
  # Manual trigger with branch protection
  workflow_dispatch:
    inputs:
      trigger_sha:
        description: 'SHA to release (optional)'
        required: false
        type: string
      source_branch:
        description: 'Branch (must be beta or main)'
        required: false
        type: string
        default: 'beta'
      force_process:
        description: 'Force queue processing'
        required: false
        type: boolean
        default: false
      allow_unsigned:
        description: 'Allow unsigned releases if signing fails'
        required: false
        type: boolean
        default: true
  # Weekly scheduled release processing - only on beta/main
  schedule:
    # Run every Saturday at 10:00 AM CST (16:00 UTC)
    - cron: '0 16 * * SAT'

# Add concurrency to prevent multiple releases running simultaneously
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  MAINTAINER_GITHUB: '@BA-CalderonMorales'
  INITIAL_VERSION: 'beta-v0.0.1'  # Updated to match new versioning scheme
  DOCKER_IMAGE: 'ba-calderonmorales/dev-environment'

# NOTE: For full details on our release process, please refer to RELEASE_SCHEDULE.md at the repository root.
# This file uses branch protection (beta/main) to trigger automations based on merges from develop.

jobs:
  #####################################################################
  # Branch Protection Check
  # ---------------------
  # Purpose: Ensures releases only run on beta/main branches
  #
  # Flow:
  # 1. Validates branch name
  # 2. Blocks unauthorized release attempts
  # 3. Sets release type for downstream jobs
  #####################################################################
  branch_check:
    runs-on: ubuntu-22.04
    outputs:
      branch: ${{ steps.action.outputs.branch }}
      allowed: ${{ steps.action.outputs.allowed }}
    steps:
      - uses: actions/checkout@v4
      - id: action
        uses: ./.github/actions/branch-check
        with:
          source_branch: ${{ github.event.inputs.source_branch }}
          github_ref: ${{ github.ref }}

  #####################################################################
  # Determine Version
  # -----------------
  # Purpose: Determines the next version for the release
  #
  # Flow:
  # 1. Gets the latest tag
  # 2. Parses the version components
  # 3. Increments version according to branch (beta/stable)
  # 4. Sets the new version
  #####################################################################
  determine_version:
    needs: branch_check
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version_action.outputs.version }}
      is_beta: ${{ steps.version_action.outputs.is_beta }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - id: version_action
        uses: ./.github/actions/version-determiner

  #####################################################################
  # Validate GPG Keys
  # -----------------
  # Purpose: Validates GPG keys before attempting release
  #
  # Flow:
  # 1. Tests GPG key import
  # 2. Verifies signing capability
  # 3. Provides diagnostic information
  #####################################################################
  validate_gpg:
    needs: [branch_check, determine_version]
    runs-on: ubuntu-22.04
    outputs:
      signing_enabled: ${{ steps.test_gpg.outputs.signing_enabled }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Test GPG Configuration
        id: test_gpg
        uses: ./.github/actions/setup-git-signing
        with:
          bot_email: ${{ secrets.BOT_EMAIL || 'actions@github.com' }}
          bot_name: ${{ secrets.BOT_NAME || 'GitHub Actions' }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          debug_mode: 'true'
      
      - name: Report GPG Status
        run: |
          if [[ "${{ steps.test_gpg.outputs.signing_enabled }}" == "true" ]]; then
            echo "✅ GPG signing is properly configured with key ID: ${{ steps.test_gpg.outputs.gpg_key_id }}"
          else
            echo "⚠️ GPG signing is not available. Releases will be created without signatures."
            echo "   Please check your BOT_GPG_PRIVATE_KEY and BOT_GPG_PASSPHRASE secrets."
          fi

  #####################################################################
  # Process Release Queue
  # -------------------
  # Purpose: Processes the release queue and prepares for release creation
  #
  # Flow:
  # 1. Gets next item from queue
  # 2. Verifies all prerequisites
  # 3. Sets up release parameters
  #####################################################################
  process_queue:
    needs: [branch_check, determine_version, validate_gpg]
    # Modified to always run for manual triggers on allowed branches
    if: |
      (github.event_name == 'workflow_dispatch' && needs.branch_check.outputs.allowed == 'true') || 
      (github.event_name == 'schedule' && needs.branch_check.outputs.allowed == 'true')
    runs-on: ubuntu-22.04
    outputs:
      sha: ${{ steps.action.outputs.sha }}
      branch: ${{ steps.action.outputs.branch }}
      can_proceed: ${{ steps.action.outputs.can_proceed }}
      version: ${{ steps.action.outputs.version }}
      prerelease: ${{ steps.action.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
      - id: action
        uses: ./.github/actions/process-release-queue-job
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_sha: ${{ github.event.inputs.trigger_sha }}
          source_branch: ${{ github.event.inputs.source_branch }}
          force_process: ${{ github.event.inputs.force_process }}
          is_scheduled: ${{ github.event_name == 'schedule' }}
          initial_version: ${{ env.INITIAL_VERSION }}

  #####################################################################
  # Create Release
  # -------------
  # Purpose: Creates the actual release if queue processing succeeded
  #
  # Flow:
  # 1. Creates GitHub release
  # 2. Updates Docker tags
  # 3. Updates documentation
  #####################################################################
  create_release:
    needs: [branch_check, determine_version, validate_gpg, process_queue]
    # Modified to always run for manual triggers on allowed branches
    if: |
      (github.event_name == 'workflow_dispatch' && needs.branch_check.outputs.allowed == 'true') ||
      (github.event_name == 'schedule' && needs.branch_check.outputs.allowed == 'true' && needs.process_queue.outputs.can_proceed == 'true')
    runs-on: ubuntu-22.04
    outputs:
      release_url: ${{ steps.create_release_action.outputs.release_url || steps.skipped_release.outputs.release_url || '' }}
      version: ${{ steps.version_check.outputs.use_version || needs.determine_version.outputs.new_version || env.INITIAL_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Ensure token has right permissions

      # Ensure we have a valid version
      - name: Set Version
        id: set_version
        run: |
          # Use the determined version or fall back to initial version
          VERSION="${{ needs.determine_version.outputs.new_version }}"
          if [[ -z "$VERSION" ]]; then
            VERSION="${{ env.INITIAL_VERSION }}"
            echo "::warning::No version determined, using default: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "$VERSION" > VERSION

      # Debug step to check version output
      - name: Debug Version Output
        id: debug
        run: |
          VERSION="${{ steps.set_version.outputs.version }}"
          echo "Using version: $VERSION"
          echo "Determined version: ${{ needs.determine_version.outputs.new_version }}"
          echo "Is beta: ${{ needs.determine_version.outputs.is_beta }}"
          echo "Process queue version: ${{ needs.process_queue.outputs.version }}"
          echo "VERSION file content:"
          cat VERSION
          
          # Check if a release already exists for this version
          echo "Checking if release for version $VERSION exists..."
          if gh release view "$VERSION" &>/dev/null; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Release for version $VERSION already exists"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "✅ No existing release found for $VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check for conflicting releases and decide whether to create a new one
      - name: Check Conflicts and Prepare Version
        id: version_check
        run: |
          BASE_VERSION="${{ steps.set_version.outputs.version }}"
          USE_VERSION="$BASE_VERSION"  # Default to base version
          
          if [[ "${{ steps.debug.outputs.release_exists }}" == "true" ]]; then
            echo "Existing release found. Checking if we need to create a new release..."
            
            # Access latest tags
            git fetch --tags
            
            # If we're on beta branch, try to increment version
            if [[ "${{ needs.branch_check.outputs.branch }}" == "beta" ]]; then
              echo "On beta branch, will create a new beta version with a fix increment"
              latest_tag=$(git describe --tags --abbrev=0 --match "beta-v*" 2>/dev/null)
              
              if [[ -n "$latest_tag" && "$latest_tag" =~ beta-v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                # Increment the fix (c) version
                major="${BASH_REMATCH[1]}"
                minor="${BASH_REMATCH[2]}"
                fix=$((BASH_REMATCH[3] + 1))
                USE_VERSION="beta-v${major}.${minor}.${fix}"
                echo "Incremented version: $USE_VERSION"
                echo "should_create=true" >> $GITHUB_OUTPUT
              else
                echo "Could not parse latest beta tag or no beta tag exists"
                echo "should_create=false" >> $GITHUB_OUTPUT
              fi
            else
              # For main branch or other branches, don't create a new release
              echo "should_create=false" >> $GITHUB_OUTPUT
            fi
          else
            # No existing release, proceed normally
            echo "should_create=true" >> $GITHUB_OUTPUT
          fi
          
          # Validate version
          if [[ -z "$USE_VERSION" ]]; then
            echo "::warning::No valid version available, using default"
            USE_VERSION="${{ env.INITIAL_VERSION }}"
          fi
          
          echo "use_version=$USE_VERSION" >> $GITHUB_OUTPUT
          echo "Using final version: $USE_VERSION"

      - name: Create Release
        id: create_release_action
        uses: ./.github/actions/create-release
        if: steps.version_check.outputs.should_create == 'true'
        with:
          # Use the version that was determined or adjusted
          version: ${{ steps.version_check.outputs.use_version }}
          prerelease: ${{ needs.determine_version.outputs.is_beta || 'true' }}
          release_sha: ${{ needs.process_queue.outputs.sha }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          bot_email: ${{ secrets.BOT_EMAIL || 'actions@github.com' }}
          bot_name: ${{ secrets.BOT_NAME || 'GitHub Actions' }}
          allow_unsigned: ${{ github.event.inputs.allow_unsigned || 'true' }}
          generate_release_notes: 'true'
          skip_if_exists: 'true'  # Skip if the tag already exists

      - name: Set Output for Skipped Release
        if: steps.version_check.outputs.should_create != 'true'
        run: |
          VERSION="${{ steps.version_check.outputs.use_version }}"
          echo "Skipping release creation for version $VERSION"
          release_url="https://github.com/$GITHUB_REPOSITORY/releases/tag/$VERSION"
          echo "release_url=$release_url" >> $GITHUB_OUTPUT
        id: skipped_release

  #####################################################################
  # Handle Failure
  # -------------
  # Purpose: Handles any failures in the release process
  #####################################################################
  handle_failure:
    needs: [branch_check, process_queue, create_release]
    if: |
      always() &&
      (needs.branch_check.outputs.allowed == 'true' && failure())
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/handle-release-failure
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          maintainer: ${{ env.MAINTAINER_GITHUB }}
          sha: ${{ needs.process_queue.outputs.sha }}
          branch: ${{ needs.process_queue.outputs.branch }}

  #####################################################################
  # Notify Queue
  # -------------
  # Purpose: Notifies the status of the release queue
  #####################################################################
  notify_queue:
    needs: [process_queue, create_release]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/notify-queue
        with:
          can_proceed: ${{ needs.process_queue.outputs.can_proceed }}
          commit_sha: ${{ needs.process_queue.outputs.sha }}
          release_result: ${{ needs.create_release.result }}
          github_token: ${{ secrets.GITHUB_TOKEN }}